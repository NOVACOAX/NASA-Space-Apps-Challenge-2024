rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read and write access to the entire database for super-admin users
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token.role == 'super-admin';
    }
    
    // match /{document=**} {
    //   allow read, write: if
    //       request.time < timestamp.date(2023, 8, 10);
    // }

    // Allow read access to the 'badges' collection for anyone
    match /badges/{document} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.token.role == 'admin';
    }

    // Define rules for the 'chatrooms' collection
    match /chatrooms/{chatroomId} {
      allow read: if true;

      // Allow create access if the user is an admin
      allow create: if request.auth != null && request.auth.uid in request.resource.data.admins
                   && 'name' in request.resource.data
                   && 'displayPicture' in request.resource.data
                   && 'description' in request.resource.data
                   && 'private' in request.resource.data
                   && 'createdByName' in request.resource.data
                   && 'createdById' in request.resource.data
                   && 'LMMessage' in request.resource.data
                   && 'LMSenderName' in request.resource.data
                   && 'LMSenderID' in request.resource.data
                   && 'LMType' in request.resource.data
                   && 'LMTimestamp' in request.resource.data
                   && 'firstInteraction' in request.resource.data
                   && 'members' in request.resource.data && request.resource.data.members.size() >= 1
                   && 'admins' in request.resource.data && request.resource.data.admins.size() >= 1
                   && 'tags' in request.resource.data;

      // Allow update if the user is an admin and the allowed fields are being changed
      allow update: if request.auth != null && request.auth.uid in resource.data.admins
                    && (('members' in request.resource.data && request.resource.data.members == resource.data.members)
                    || ('admins' in request.resource.data && request.resource.data.admins == resource.data.admins)
                    || ('name' in request.resource.data && request.resource.data.name == resource.data.name)
                    || ('displayPicture' in request.resource.data && request.resource.data.displayPicture == resource.data.displayPicture)
                    || ('private' in request.resource.data && request.resource.data.private == resource.data.private)
                    || ('description' in request.resource.data && request.resource.data.description == resource.data.description));

      // Allow users to remove their ID from the members array
      allow update: if request.auth != null && ((request.auth.uid in request.resource.data.members
                    && request.resource.data.members.hasAll(resource.data.members)) || request.resource.id == 'TIMCommunity');

      // Allow users to add their ID to the members array if the private field is false
      allow update: if request.auth != null && request.resource.data.private == false
                    && !(request.resource.data.members.hasAll(resource.data.members));

      // Allow deletion if the entry doesn't have sub-collections
      allow delete: if request.auth != null && request.auth.uid in resource.data.admins
                    && !exists(/databases/$(database)/documents/chatrooms/$(chatroomId)/messageList);
                    
      // Allow write access to the 'messageList' sub-collection
      match /messageList/{messageId} {
        allow read: if true;

        allow create: if request.resource.data.keys().hasAll(['message', 'type', 'timestamp', 'senderName', 'senderID', 'tags', 'staredBY'])
                      && 'replyMessageID' in request.resource.data
                      && 'replyMessageMessage' in request.resource.data
                      && 'replyMessageSenderName' in request.resource.data
                      && 'replyMessageSenderID' in request.resource.data
                      && 'replyMessageType' in request.resource.data;

        // Allow update for the sender of the message for specific fields
        allow update: if request.auth != null &&
                     (request.auth.uid == resource.data.senderID || request.auth.uid in get(/databases/$(database)/documents/chatrooms/$(chatroomId)).data.admins) &&
                     (request.resource.data.keys().hasOnly(['LMMessage', 'LMSenderName', 'LMSenderID', 'LMType', 'LMTimestamp'])
                     && !('createdById' in request.resource.data || 'firstInteraction' in request.resource.data));

        // Allow delete if the sender is the user or if the user is an admin of the chatroom
        allow delete: if request.auth != null &&
                    (request.auth.uid == resource.data.senderID || request.auth.uid in get(/databases/$(database)/documents/chatrooms/$(chatroomId)).data.admins);

      }
    }
    
    // Define rules for the 'follows' collection
    match /follows/{followId} {
    	allow read: if true;
    		
      // Allow create if 'follower' and 'following' fields are present and 'follower' is the user id
      allow create: if request.resource.data.keys().hasAll(['follower', 'following'])
                    && request.resource.data.follower == request.auth.uid;

      // Allow delete if 'follower' is the user id
      allow delete: if request.auth != null && request.auth.uid == resource.data.follower;

      // Prevent any other write operations (update, set)
      allow write: if false;
    }
    
    // Define rules for the 'feedbacks' collection
    match /feedbacks/{feedbackId} {
    
      // Allow create if the required fields are present
      allow create: if request.resource.data.keys().hasAll(['feedback', 'images', 'rating', 'status', 'timestamp']);

      // Allow delete if the user is an admin
      allow read, delete: if request.auth != null && request.auth.token.role == 'admin';

			// Allow update of 'status' by an admin
      allow update: if request.auth != null && request.auth.token.role == 'admin'
               && 'status' in request.resource.data;
    }
    
    // Define rules for the 'reports' collection
    match /reports/{reportId} {
    
      // Allow create if the required fields are present
      allow create: if request.resource.data.keys().hasAll(['Reason', 'images', 'status', 'timestamp', 'type', 'typeID']);

      // Allow read and delete if the user is an admin
      allow read, delete: if request.auth != null && request.auth.token.role == 'admin';

      // Allow update of 'status' by an admin
      allow update: if request.auth != null && request.auth.token.role == 'admin'
                     && 'status' in request.resource.data;
    }
    
    // Define rules for the 'stories' collection
    match /stories/{storyId} {
      allow read, write: if true;
    }

    // Define rules for the 'users' collection
    match /users/{userId} {
      allow read, write: if true;
    }

    // Define rules for the 'messages' collection
    match /messages/{messageId} {
      allow read, write: if true;
    }
    
  }
}
